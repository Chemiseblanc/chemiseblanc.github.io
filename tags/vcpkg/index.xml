<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Vcpkg on Matt's Homepage</title><link>https://mgibson.ca/tags/vcpkg/</link><description>Recent content in Vcpkg on Matt's Homepage</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Thu, 09 May 2024 23:43:01 +0000</lastBuildDate><atom:link href="https://mgibson.ca/tags/vcpkg/index.xml" rel="self" type="application/rss+xml"/><item><title>My 2024 C++ workflow using Modern CMake and Vcpkg</title><link>https://mgibson.ca/posts/my-2024-c-workflow-using-modern-cmake-and-vcpkg/</link><pubDate>Thu, 09 May 2024 23:43:01 +0000</pubDate><guid>https://mgibson.ca/posts/my-2024-c-workflow-using-modern-cmake-and-vcpkg/</guid><description>Setting up and maintaining a C++ development environment has always been more difficult than for newer languages, especially once third party dependencies are involved, but in the last few years the ecosystem has improved to the point where it&amp;rsquo;s possible to create a project that can bootstrap a cross-platform development environment just by opening it with an editor that supports cmake or with a single command in the terminal.</description></item><item><title>VCPKG Binary Caching with Nuget</title><link>https://mgibson.ca/posts/vcpkg-binary-caching-with-nuget/</link><pubDate>Thu, 22 Dec 2022 19:18:32 +0000</pubDate><guid>https://mgibson.ca/posts/vcpkg-binary-caching-with-nuget/</guid><description>When using vcpkg on projects with many or large dependencies, a large portion of your total build time can be just from building these dependencies even though the resulting artifacts don&amp;rsquo;t change between compiles.</description></item></channel></rss>