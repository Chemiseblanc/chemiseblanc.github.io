<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Matt's Homepage</title><link>https://mgibson.ca/posts/</link><description>Recent content in Posts on Matt's Homepage</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 22 Dec 2022 19:18:32 +0000</lastBuildDate><atom:link href="https://mgibson.ca/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>VCPKG Binary Caching with Nuget</title><link>https://mgibson.ca/posts/vcpkg-binary-caching-with-nuget/</link><pubDate>Thu, 22 Dec 2022 19:18:32 +0000</pubDate><guid>https://mgibson.ca/posts/vcpkg-binary-caching-with-nuget/</guid><description>When using vcpkg on projects with many or large dependencies, a large portion of your total build time can be just from building these dependencies even though the resulting artifacts don&amp;rsquo;t change between compiles.</description></item><item><title>Simplify your C++ development environment using CMakePresets.json</title><link>https://mgibson.ca/posts/simplify-your-c-development-environment-using-cmakepresets-json/</link><pubDate>Fri, 16 Sep 2022 13:49:10 +0000</pubDate><guid>https://mgibson.ca/posts/simplify-your-c-development-environment-using-cmakepresets-json/</guid><description>CMake is a cross-platform utility that abstracts your C++ projects across a wide array of operating systems, compiler toolchains, and build tools. While supported by popular editors such as Visual Studio, VSCode, and CLion, there hasnâ€™t been any way to specify build variants and toolchain options in a cross-editor fashion.</description></item><item><title>Interfaces and Base Classes</title><link>https://mgibson.ca/posts/interface-base-classes/</link><pubDate>Sun, 07 Nov 2021 19:22:15 +0000</pubDate><guid>https://mgibson.ca/posts/interface-base-classes/</guid><description>&lt;p>Recently, I was recommended a video on YouTube by ArjanCodes, detailing the differences between Protocols and Abstract Base Classes in Python.&lt;/p>
&lt;p>While he tries to contrast the two, the problem is that for a dynamically typed language like Python the differences are superficial.&lt;/p>
&lt;p>Here is my take on the comparison and how it transfers to a statically typed language like C++.&lt;/p></description></item><item><title>Manufacturing Objects</title><link>https://mgibson.ca/posts/manufacturing-objects/</link><pubDate>Tue, 26 Oct 2021 16:10:00 -0400</pubDate><guid>https://mgibson.ca/posts/manufacturing-objects/</guid><description>&lt;p>In object oriented programming, factory patterns are common design patterns for object creation.
Online I&amp;rsquo;ve found some explanations of them lacking and often confused with a different concept entirely.&lt;/p>
&lt;p>In this post I&amp;rsquo;m going to try and clarify the differences between these patterns and concepts and the purposes behind them.&lt;/p></description></item><item><title>Introducing Latitude</title><link>https://mgibson.ca/posts/introducing-latitude/</link><pubDate>Fri, 22 Oct 2021 17:14:51 -0400</pubDate><guid>https://mgibson.ca/posts/introducing-latitude/</guid><description>&lt;p>Hello, World!&lt;/p>
&lt;p>I decided to give my long neglected homepage a makeover (ignoring my other long neglected websites) but instead of just picking
something interesting from the &lt;a href="https://themes.gohugo.io/">Hugo theme list&lt;/a> I decided to go all in and make a new theme from scratch.&lt;/p></description></item></channel></rss>